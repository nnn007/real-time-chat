version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: chat_postgres
    environment:
      POSTGRES_DB: realtime_chat
      POSTGRES_USER: chat_user
      POSTGRES_PASSWORD: chat_password_dev
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/postgresql_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - chat_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chat_user -d realtime_chat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: chat_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin_password_dev
      MONGO_INITDB_DATABASE: realtime_chat
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./database/mongodb_schema.js:/docker-entrypoint-initdb.d/mongodb_schema.js:ro
    networks:
      - chat_network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/realtime_chat --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache and Pub/Sub
  redis:
    image: redis:7-alpine
    container_name: chat_redis
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./database/redis_config.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - chat_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: chat_backend
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://chat_user:chat_password_dev@postgres:5432/realtime_chat
      - MONGODB_URL=mongodb://admin:admin_password_dev@mongodb:27017/realtime_chat?authSource=admin
      - REDIS_URL=redis://redis:6379/0
      - FRONTEND_URL=http://localhost:3000
      - HOST=0.0.0.0
      - PORT=8000
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
    networks:
      - chat_network
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    develop:
      watch:
        - action: sync
          path: ./backend
          target: /app
          ignore:
            - __pycache__/
            - "*.pyc"
        - action: rebuild
          path: ./backend/requirements.txt

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: chat_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
      - REACT_APP_ENVIRONMENT=development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - chat_network
    depends_on:
      - backend
    restart: unless-stopped
    develop:
      watch:
        - action: sync
          path: ./frontend/src
          target: /app/src
        - action: rebuild
          path: ./frontend/package.json

  # Nginx Reverse Proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: chat_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - chat_network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    profiles:
      - production

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: chat_celery_worker
    command: celery -A app.celery_app worker --loglevel=info
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://chat_user:chat_password_dev@postgres:5432/realtime_chat
      - MONGODB_URL=mongodb://admin:admin_password_dev@mongodb:27017/realtime_chat?authSource=admin
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
    networks:
      - chat_network
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - background_tasks

  # Celery Beat for Scheduled Tasks
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: chat_celery_beat
    command: celery -A app.celery_app beat --loglevel=info
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://chat_user:chat_password_dev@postgres:5432/realtime_chat
      - MONGODB_URL=mongodb://admin:admin_password_dev@mongodb:27017/realtime_chat?authSource=admin
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./backend:/app
    networks:
      - chat_network
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - background_tasks

  # Flower for Celery Monitoring
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: chat_flower
    command: celery -A app.celery_app flower --port=5555
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "5555:5555"
    networks:
      - chat_network
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - monitoring

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: chat_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - chat_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: chat_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - chat_network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

  # Elasticsearch for Advanced Search (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: chat_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - chat_network
    restart: unless-stopped
    profiles:
      - advanced_search

  # Kibana for Elasticsearch Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: chat_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - chat_network
    depends_on:
      - elasticsearch
    restart: unless-stopped
    profiles:
      - advanced_search

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  chat_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

